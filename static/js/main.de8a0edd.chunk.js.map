{"version":3,"sources":["Test.jsx","Rails.jsx","React.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Test","props","state","to","React","Component","links","react","url","text","explanation","className","href","rails","About","map","link","id","Reacts","App","display","style","Fragment","exact","path","component","Rails","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.de8a0edd.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nclass Test extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n    }\n    render()\n    {\n        return (\n            <div>\n                <h1>使用しているライブラリを選択してください</h1>\n                <Link to=\"/\"> <button>React</button></Link>\n                <Link to=\"/About\"> <button>Rails</button></Link>\n            </div>\n        );\n    }\n}\n\nexport default Test;","import React from 'react';\nconst links = {\n    react: [\n        {\n            url: \"sleep\",\n            text: \"sleep\",\n            explanation: <div>\n                <p>sleep関数は第一引数で渡された時間処理を待ちます</p>\n                <p>第二引数に待ったあとの処理をコールバック関数で渡してください</p>\n                <div>\n                    <p className=\"tag\">引数</p>\n                    <p>1 待ちたい時間 2 コルバック関数で待ったあとの処理</p>\n                </div>\n                <div className=\"padding\">\n                    <p className=\"tag\">例</p>\n                    <p>1秒待った後にconsoleにHelloと出力する場合</p>\n                    <p>{`FCC.sleep(1000, () => { console.log('Hello') })`}</p>\n                </div>\n            </div>\n        },\n        {\n            url: \"mathclass\",\n            text: \"math\",\n            explanation: <div>\n                <div>\n                    <p>数学を扱うクラスです</p>\n                    <p>定数Mathsでインスタンスを宣言しています</p>\n                </div>\n                <p>関連関数</p>\n                <a href=\"#mathnew\">Mathsnew</a>\n            </div>\n        },\n        {\n            url: \"math\",\n            text: \"Maths\",\n            explanation: <div>\n                <div>\n                    <p>mathのインスタンスです</p>\n                    <p>数学を扱います</p>\n                    <p>Javascript標準のMathでは出来ない処理を行えます</p>\n                </div>\n                <p>関連関数</p>\n                <a href=\"#mathnew\">Mathsnew</a>\n            </div>\n        }, {\n            url: \"mathnew\",\n            text: \"Mathsnew\",\n            explanation: <div>\n                <p>mathのインスタンスを返します</p>\n            </div>\n        }, {\n            url: \"ranbom\",\n            text: \"Random\",\n            explanation: <div>\n                <p>0~渡された値-1の</p>\n                <p>乱数を生成します</p>\n                <p className=\"tag\">引数</p>\n                <p>1 乱数を生成したい値</p>\n                <p className=\"tag\">例</p>\n                <p>0 ~ 3の乱数を生成する場合</p>\n                <p>{`FCC.Random(4)`}</p>\n            </div>\n        }, {\n            url: \"ncr\",\n            text: \"nCr\",\n            explanation: <div>\n                <p></p>\n            </div>\n        }, {\n            url: \"npr\",\n            text: \"nPr\",\n            explanation: <div>\n                <p></p>\n            </div>\n        }, {\n            url: \"pow\",\n            text: \"Pow\",\n            explanation: <div>\n                <p></p>\n            </div>\n        }\n    ],\n    rails: [{\n\n    }]\n}\nclass About extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n    }\n    render()\n    {\n        return (\n            <div>\n                <div>\n                    <p>基本的な使い方</p>\n                    <p>まずFCC.jsxを読み込みます</p>\n                    <p>FCCと言う定数が全ての関数、コンポーネントを継承してます</p>\n                    <p>長いので目次</p>\n                </div>\n                <div>\n                    <p className=\"btn\">関数</p>\n                </div>\n                {\n                    links.rails.map((link) =>\n                    {\n                        return (\n                            <div className=\"link\">\n                                <a href={`#${link.url}`}><button>{link.text}</button></a>\n                            </div>\n                        )\n                    })\n                }\n                {\n                    links.rails.map((link) =>\n                    {\n                        return (\n                            <div id={link.url}>\n                                <div>\n                                    <p className=\"btn\">{link.text}</p>\n                                </div>\n                                {\n                                    link.explanation\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default About;","import React from 'react';\nconst links = {\n    react: [\n        {\n            url: \"sleep\",\n            text: \"sleep\",\n            explanation: <div>\n                <p>sleep関数は第一引数で渡された時間処理を待ちます</p>\n                <p>第二引数に待ったあとの処理をコールバック関数で渡してください</p>\n                <div>\n                    <p className=\"tag\">引数</p>\n                    <p>1 待ちたい時間 2 コルバック関数で待ったあとの処理</p>\n                </div>\n                <div className=\"padding\">\n                    <p className=\"tag\">例</p>\n                    <p>1秒待った後にconsoleにHelloと出力する場合</p>\n                    <p>{`FCC.sleep(1000, () => { console.log('Hello') })`}</p>\n                </div>\n            </div>\n        },\n        {\n            url: \"mathclass\",\n            text: \"math\",\n            explanation: <div>\n                <div>\n                    <p>数学を扱うクラスです</p>\n                    <p>定数Mathsでインスタンスを宣言しています</p>\n                </div>\n                <p>関連関数</p>\n                <a href=\"#mathnew\">Mathsnew</a>\n            </div>\n        },\n        {\n            url: \"math\",\n            text: \"Maths\",\n            explanation: <div>\n                <div>\n                    <p>mathのインスタンスです</p>\n                    <p>数学を扱います</p>\n                    <p>Javascript標準のMathでは出来ない処理を行えます</p>\n                </div>\n                <p>関連関数</p>\n                <a href=\"#mathnew\">Mathsnew</a>\n            </div>\n        }, {\n            url: \"mathnew\",\n            text: \"Mathsnew\",\n            explanation: <div>\n                <p>mathのインスタンスを返します</p>\n            </div>\n        }, {\n            url: \"ranbom\",\n            text: \"Random\",\n            explanation: <div>\n                <p>0~渡された値-1の</p>\n                <p>乱数を生成します</p>\n                <p className=\"tag\">引数</p>\n                <p>1 乱数を生成したい値</p>\n                <p className=\"tag\">例</p>\n                <p>0 ~ 3の乱数を生成する場合</p>\n                <p>{`FCC.Random(4)`}</p>\n            </div>\n        }, {\n            url: \"ncr\",\n            text: \"nCr\",\n            explanation: <div>\n                <p></p>\n            </div>\n        }, {\n            url: \"npr\",\n            text: \"nPr\",\n            explanation: <div>\n                <p></p>\n            </div>\n        }, {\n            url: \"pow\",\n            text: \"Pow\",\n            explanation: <div>\n                <p></p>\n            </div>\n        }\n    ],\n    rails: [{\n\n    }]\n}\nclass Reacts extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state = {}\n    }\n    render()\n    {\n        return (\n            <div>\n                <div>\n                    <p>基本的な使い方</p>\n                    <p>まずFCC.jsxを読み込みます</p>\n                    <p>FCCと言う定数が全ての関数、コンポーネントを継承してます</p>\n                    <p>長いので目次</p>\n                </div>\n                <div>\n                    <p className=\"btn\">関数</p>\n                </div>\n                {\n                    links.react.map((link) =>\n                    {\n                        return (\n                            <div className=\"link\">\n                                <a href={`#${link.url}`}><button>{link.text}</button></a>\n                            </div>\n                        )\n                    })\n                }\n                {\n                    links.react.map((link) =>\n                    {\n                        return (\n                            <div id={link.url}>\n                                <div>\n                                    <p className=\"btn\">{link.text}</p>\n                                </div>\n                                {\n                                    link.explanation\n                                }\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        );\n    }\n}\n\nexport default Reacts;","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Test from './Test'\nimport Rails from './Rails';\nimport Reacts from './React';\nclass App extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      react: { display: \"none\" },\n      rails: { display: \"none\" },\n      style: { display: \"block\" }\n    }\n  }\n  render()\n  {\n    return (\n      <React.Fragment>\n        <Router>\n          <div>\n            <Test /><hr />\n            <Route exact path='/' component={Reacts} />\n            <Route path='/About' component={Rails} />\n          </div>\n        </Router>\n      </React.Fragment >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}