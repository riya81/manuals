{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["console","log","FCC","Gcd","App","props","state","react","display","rails","style","links","url","text","explanation","className","href","Fragment","this","onClick","setState","map","link","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAGAA,QAAQC,IAAIC,IAAIC,IAAI,EAAG,I,IAwLRC,E,kDArLb,WAAYC,GACX,IAAD,8BACE,cAAMA,IACDC,MAAQ,CACXC,MAAO,CAAEC,QAAS,QAClBC,MAAO,CAAED,QAAS,QAClBE,MAAO,CAAEF,QAAS,UALtB,E,qDASC,IAAD,OACQG,EAAQ,CACZJ,MAAO,CACL,CACEK,IAAK,QACLC,KAAM,QACNC,YAAa,6BACX,kKACA,mNACA,6BACE,uBAAGC,UAAU,OAAb,gBACA,yKAEF,yBAAKA,UAAU,WACb,uBAAGA,UAAU,OAAb,UACA,gIACA,iFAIN,CACEH,IAAK,YACLC,KAAM,OACNC,YAAa,6BACX,6BACE,2FACA,2IAEF,uDACA,uBAAGE,KAAK,YAAR,cAGJ,CACEJ,IAAK,OACLC,KAAM,QACNC,YAAa,6BACX,6BACE,yFACA,yEACA,8IAEF,uDACA,uBAAGE,KAAK,YAAR,cAED,CACDJ,IAAK,UACLC,KAAM,WACNC,YAAa,6BACX,6GAED,CACDF,IAAK,SACLC,KAAM,SACNC,YAAa,6BACX,uEACA,+EACA,uBAAGC,UAAU,OAAb,gBACA,uFACA,uBAAGA,UAAU,OAAb,UACA,gGACA,8CAED,CACDH,IAAK,MACLC,KAAM,MACNC,YAAa,6BACX,8BAED,CACDF,IAAK,MACLC,KAAM,MACNC,YAAa,6BACX,8BAED,CACDF,IAAK,MACLC,KAAM,MACNC,YAAa,6BACX,+BAINL,MAAO,CAAC,KAIV,OACE,kBAAC,IAAMQ,SAAP,KACE,yBAAKP,MAAOQ,KAAKZ,MAAMI,OACrB,8JACA,4BAAQS,QAAS,WAAQ,EAAKC,SAAS,CAAEV,MAAO,CAAEF,QAAS,QAAUD,MAAO,CAAEC,QAAS,aAAvF,SACA,4BAAQW,QAAS,WAAQ,EAAKC,SAAS,CAAEV,MAAO,CAAEF,QAAS,QAAUC,MAAO,CAAED,QAAS,aAAvF,UAEF,yBAAKE,MAAOQ,KAAKZ,MAAMC,OACrB,6BACE,yEACA,4FACA,8LACA,oEAEF,6BACE,uBAAGQ,UAAU,OAAb,iBAGAJ,EAAMJ,MAAMc,KAAI,SAACC,GAEf,OACE,yBAAKP,UAAU,QACb,uBAAGC,KAAI,WAAMM,EAAKV,MAAO,gCAASU,EAAKT,WAM7CF,EAAMJ,MAAMc,KAAI,SAACC,GAEf,OACE,yBAAKC,GAAID,EAAKV,KACZ,6BACE,uBAAGG,UAAU,OAAOO,EAAKT,OAGzBS,EAAKR,iBAOjB,yBAAKJ,MAAOQ,KAAKZ,MAAMG,OACrB,6BACE,yEACA,4FACA,8LACA,oEAEF,6BACE,uBAAGM,UAAU,OAAb,iBAGAJ,EAAMF,MAAMY,KAAI,SAACC,GAEf,OACE,yBAAKP,UAAU,QACb,uBAAGC,KAAI,WAAMM,EAAKV,MAAO,gCAASU,EAAKT,WAM7CF,EAAMF,MAAMY,KAAI,SAACC,GAEf,OACE,yBAAKC,GAAID,EAAKV,KACZ,6BACE,uBAAGG,UAAU,OAAOO,EAAKT,OAGzBS,EAAKR,sB,GA1KPU,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,c","file":"static/js/main.f0f47608.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport FCC from 'fcc-react-modules';\nconsole.log(FCC.Gcd(2, 4));\nclass App extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      react: { display: \"none\" },\n      rails: { display: \"none\" },\n      style: { display: \"block\" }\n    }\n  }\n  render()\n  {\n    const links = {\n      react: [\n        {\n          url: \"sleep\",\n          text: \"sleep\",\n          explanation: <div>\n            <p>sleep関数は第一引数で渡された時間処理を待ちます</p>\n            <p>第二引数に待ったあとの処理をコールバック関数で渡してください</p>\n            <div>\n              <p className=\"tag\">引数</p>\n              <p>1 待ちたい時間 2 コルバック関数で待ったあとの処理</p>\n            </div>\n            <div className=\"padding\">\n              <p className=\"tag\">例</p>\n              <p>1秒待った後にconsoleにHelloと出力する場合</p>\n              <p>{`FCC.sleep(1000, () => { console.log('Hello') })`}</p>\n            </div>\n          </div>\n        },\n        {\n          url: \"mathclass\",\n          text: \"math\",\n          explanation: <div>\n            <div>\n              <p>数学を扱うクラスです</p>\n              <p>定数Mathsでインスタンスを宣言しています</p>\n            </div>\n            <p>関連関数</p>\n            <a href=\"#mathnew\">Mathsnew</a>\n          </div>\n        },\n        {\n          url: \"math\",\n          text: \"Maths\",\n          explanation: <div>\n            <div>\n              <p>mathのインスタンスです</p>\n              <p>数学を扱います</p>\n              <p>Javascript標準のMathでは出来ない処理を行えます</p>\n            </div>\n            <p>関連関数</p>\n            <a href=\"#mathnew\">Mathsnew</a>\n          </div>\n        }, {\n          url: \"mathnew\",\n          text: \"Mathsnew\",\n          explanation: <div>\n            <p>mathのインスタンスを返します</p>\n          </div>\n        }, {\n          url: \"ranbom\",\n          text: \"Random\",\n          explanation: <div>\n            <p>0~渡された値-1の</p>\n            <p>乱数を生成します</p>\n            <p className=\"tag\">引数</p>\n            <p>1 乱数を生成したい値</p>\n            <p className=\"tag\">例</p>\n            <p>0 ~ 3の乱数を生成する場合</p>\n            <p>{`FCC.Random(4)`}</p>\n          </div>\n        }, {\n          url: \"ncr\",\n          text: \"nCr\",\n          explanation: <div>\n            <p></p>\n          </div>\n        }, {\n          url: \"npr\",\n          text: \"nPr\",\n          explanation: <div>\n            <p></p>\n          </div>\n        }, {\n          url: \"pow\",\n          text: \"Pow\",\n          explanation: <div>\n            <p></p>\n          </div>\n        }\n      ],\n      rails: [{\n\n      }]\n    }\n    return (\n      <React.Fragment>\n        <div style={this.state.style}>\n          <h1>使っているフレームワークを選択してください</h1>\n          <button onClick={() => { this.setState({ style: { display: \"none\" }, react: { display: \"block\" } }) }}>React</button>\n          <button onClick={() => { this.setState({ style: { display: \"none\" }, rails: { display: \"block\" } }) }}>Rails</button>\n        </div>\n        <div style={this.state.react}>\n          <div>\n            <p>基本的な使い方</p>\n            <p>まずFCC.jsxを読み込みます</p>\n            <p>FCCと言う定数が全ての関数、コンポーネントを継承してます</p>\n            <p>長いので目次</p>\n          </div>\n          <div>\n            <p className=\"btn\">関数</p>\n          </div>\n          {\n            links.react.map((link) =>\n            {\n              return (\n                <div className=\"link\">\n                  <a href={`#${link.url}`}><button>{link.text}</button></a>\n                </div>\n              )\n            })\n          }\n          {\n            links.react.map((link) =>\n            {\n              return (\n                <div id={link.url}>\n                  <div>\n                    <p className=\"btn\">{link.text}</p>\n                  </div>\n                  {\n                    link.explanation\n                  }\n                </div>\n              )\n            })\n          }\n        </div>\n        <div style={this.state.rails}>\n          <div>\n            <p>基本的な使い方</p>\n            <p>まずFCC.jsxを読み込みます</p>\n            <p>FCCと言う定数が全ての関数、コンポーネントを継承してます</p>\n            <p>長いので目次</p>\n          </div>\n          <div>\n            <p className=\"btn\">関数</p>\n          </div>\n          {\n            links.rails.map((link) =>\n            {\n              return (\n                <div className=\"link\">\n                  <a href={`#${link.url}`}><button>{link.text}</button></a>\n                </div>\n              )\n            })\n          }\n          {\n            links.rails.map((link) =>\n            {\n              return (\n                <div id={link.url}>\n                  <div>\n                    <p className=\"btn\">{link.text}</p>\n                  </div>\n                  {\n                    link.explanation\n                  }\n                </div>\n              )\n            })\n          }\n        </div>\n      </React.Fragment >\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}